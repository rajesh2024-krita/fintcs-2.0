{"ast":null,"code":"import { Router } from '@angular/router';\nimport { inject } from '@angular/core';\nimport { AuthService } from '../services/auth.service';\nexport const roleGuard = allowedRoles => {\n  return (route, state) => {\n    const authService = inject(AuthService);\n    const router = inject(Router);\n    if (!authService.isAuthenticated()) {\n      router.navigate(['/auth/login']);\n      return false;\n    }\n    if (authService.hasRole(allowedRoles)) {\n      return true;\n    }\n    router.navigate(['/dashboard']);\n    return false;\n  };\n};\nexport const authGuard = (route, state) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  if (authService.isAuthenticated()) {\n    return true;\n  }\n  router.navigate(['/auth/login']);\n  return false;\n};","map":{"version":3,"names":["Router","inject","AuthService","roleGuard","allowedRoles","route","state","authService","router","isAuthenticated","navigate","hasRole","authGuard"],"sources":["C:\\Rajesh\\Angular\\FinTCS\\fintcs-new\\fintcs-2.0\\src\\app\\core\\guards\\role.guard.ts"],"sourcesContent":["\r\nimport { CanActivateFn, Router } from '@angular/router';\r\nimport { inject } from '@angular/core';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { UserRole } from '../../shared/models/user.model';\r\n\r\nexport const roleGuard = (allowedRoles: UserRole[]): CanActivateFn => {\r\n  return (route, state) => {\r\n    const authService = inject(AuthService);\r\n    const router = inject(Router);\r\n\r\n    if (!authService.isAuthenticated()) {\r\n      router.navigate(['/auth/login']);\r\n      return false;\r\n    }\r\n\r\n    if (authService.hasRole(allowedRoles)) {\r\n      return true;\r\n    }\r\n\r\n    router.navigate(['/dashboard']);\r\n    return false;\r\n  };\r\n};\r\n\r\nexport const authGuard: CanActivateFn = (route, state) => {\r\n  const authService = inject(AuthService);\r\n  const router = inject(Router);\r\n\r\n  if (authService.isAuthenticated()) {\r\n    return true;\r\n  }\r\n\r\n  router.navigate(['/auth/login']);\r\n  return false;\r\n};\r\n"],"mappings":"AACA,SAAwBA,MAAM,QAAQ,iBAAiB;AACvD,SAASC,MAAM,QAAQ,eAAe;AACtC,SAASC,WAAW,QAAQ,0BAA0B;AAGtD,OAAO,MAAMC,SAAS,GAAIC,YAAwB,IAAmB;EACnE,OAAO,CAACC,KAAK,EAAEC,KAAK,KAAI;IACtB,MAAMC,WAAW,GAAGN,MAAM,CAACC,WAAW,CAAC;IACvC,MAAMM,MAAM,GAAGP,MAAM,CAACD,MAAM,CAAC;IAE7B,IAAI,CAACO,WAAW,CAACE,eAAe,EAAE,EAAE;MAClCD,MAAM,CAACE,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;MAChC,OAAO,KAAK;IACd;IAEA,IAAIH,WAAW,CAACI,OAAO,CAACP,YAAY,CAAC,EAAE;MACrC,OAAO,IAAI;IACb;IAEAI,MAAM,CAACE,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;IAC/B,OAAO,KAAK;EACd,CAAC;AACH,CAAC;AAED,OAAO,MAAME,SAAS,GAAkBA,CAACP,KAAK,EAAEC,KAAK,KAAI;EACvD,MAAMC,WAAW,GAAGN,MAAM,CAACC,WAAW,CAAC;EACvC,MAAMM,MAAM,GAAGP,MAAM,CAACD,MAAM,CAAC;EAE7B,IAAIO,WAAW,CAACE,eAAe,EAAE,EAAE;IACjC,OAAO,IAAI;EACb;EAEAD,MAAM,CAACE,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;EAChC,OAAO,KAAK;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}