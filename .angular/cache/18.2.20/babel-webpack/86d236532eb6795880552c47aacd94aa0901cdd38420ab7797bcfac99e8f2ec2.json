{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5000/api';\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.loadStoredUser();\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/auth/login`, credentials).pipe(tap(response => {\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('user', JSON.stringify(response.user));\n      this.currentUserSubject.next(response.user);\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    this.currentUserSubject.next(null);\n  }\n  isAuthenticated() {\n    return !!localStorage.getItem('token');\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  hasRole(roles) {\n    const currentUser = this.getCurrentUser();\n    return currentUser ? roles.includes(currentUser.role) : false;\n  }\n  hasSingleRole(role) {\n    return this.hasRole([role]);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  getUsers(societyId) {\n    const params = societyId ? `?societyId=${societyId}` : '';\n    return this.http.get(`${this.apiUrl}/auth/users${params}`);\n  }\n  createUser(user) {\n    return this.http.post(`${this.apiUrl}/auth/users`, user);\n  }\n  updateUser(id, user) {\n    return this.http.put(`${this.apiUrl}/auth/users/${id}`, user);\n  }\n  deleteUser(id) {\n    return this.http.delete(`${this.apiUrl}/auth/users/${id}`);\n  }\n  loadStoredUser() {\n    const token = localStorage.getItem('token');\n    const userData = localStorage.getItem('user');\n    if (token && userData) {\n      try {\n        const user = JSON.parse(userData);\n        this.currentUserSubject.next(user);\n      } catch (error) {\n        this.logout();\n      }\n    }\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","apiUrl","currentUserSubject","currentUser$","asObservable","loadStoredUser","login","credentials","post","pipe","response","localStorage","setItem","token","JSON","stringify","user","next","logout","removeItem","isAuthenticated","getItem","getCurrentUser","value","hasRole","roles","currentUser","includes","role","hasSingleRole","getToken","getUsers","societyId","params","get","createUser","updateUser","id","put","deleteUser","delete","userData","parse","error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Rajesh\\Angular\\FinTCS\\fintcs-new\\fintcs-2.0\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { User, UserRole, LoginRequest, LoginResponse } from '../../shared/models/user.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private readonly apiUrl = 'http://localhost:5000/api';\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.loadStoredUser();\r\n  }\r\n\r\n  login(credentials: LoginRequest): Observable<LoginResponse> {\r\n    return this.http.post<LoginResponse>(`${this.apiUrl}/auth/login`, credentials).pipe(\r\n      tap(response => {\r\n        localStorage.setItem('token', response.token);\r\n        localStorage.setItem('user', JSON.stringify(response.user));\r\n        this.currentUserSubject.next(response.user);\r\n      })\r\n    );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    this.currentUserSubject.next(null);\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!localStorage.getItem('token');\r\n  }\r\n\r\n  getCurrentUser(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  hasRole(roles: UserRole[]): boolean {\r\n    const currentUser = this.getCurrentUser();\r\n    return currentUser ? roles.includes(currentUser.role) : false;\r\n  }\r\n\r\n  hasSingleRole(role: UserRole): boolean {\r\n    return this.hasRole([role]);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n\r\n  getUsers(societyId?: string): Observable<User[]> {\r\n    const params = societyId ? `?societyId=${societyId}` : '';\r\n    return this.http.get<User[]>(`${this.apiUrl}/auth/users${params}`);\r\n  }\r\n\r\n  createUser(user: any): Observable<User> {\r\n    return this.http.post<User>(`${this.apiUrl}/auth/users`, user);\r\n  }\r\n\r\n  updateUser(id: string, user: any): Observable<User> {\r\n    return this.http.put<User>(`${this.apiUrl}/auth/users/${id}`, user);\r\n  }\r\n\r\n  deleteUser(id: string): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/auth/users/${id}`);\r\n  }\r\n\r\n  private loadStoredUser(): void {\r\n    const token = localStorage.getItem('token');\r\n    const userData = localStorage.getItem('user');\r\n\r\n    if (token && userData) {\r\n      try {\r\n        const user = JSON.parse(userData) as User;\r\n        this.currentUserSubject.next(user);\r\n      } catch (error) {\r\n        this.logout();\r\n      }\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}